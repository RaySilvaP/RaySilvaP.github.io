@page "/projects/storagemanager"
@using Shared.Models
@inject IJSRuntime _jS

<div class="project">
    <div class="head">
        <img class="thumbnail" src="storageManager/borracharia-icon.svg">
        <div class="right-eye">
            <h1 class="title">Storage Manager</h1>
            <nav>
                <div class="@SetActive(Tab.Article)" @onclick="() => _tab = Tab.Article">Article</div>
                <div class="@SetActive(Tab.Gallery)" @onclick="() => _tab = Tab.Gallery">Gallery</div>
            </nav>
        </div>
    </div>
    @if (_tab == Tab.Article)
    {
        <div class="article">
            <div id="text" class="commom-text">
                <h2 class=" important-text">Introduction</h2>
                <p class=" paragraph">A relative who owns a small tire shop asked me to help find a solution for managing
                    their
                    storage.
                    They wanted software that would be easy for both themselves and their employees to access and use, so I
                    suggested a
                    mobile app.</p>
                <div class="article-image-frame">
                    <img src="storageManager/WhatsApp Image 2025-04-03 at 9.08.01 PM.jpeg" />
                </div>
                <h2 class="important-text">Objective</h2>
                <p class="paragraph">My goal was to create a mobile app to manage the storage for a small tire shop, with
                    an emphasis
                    on simplicity and ease of use.
                    I chose the .NET MAUI Blazor hybrid app project template, allowing me to leverage my HTML, CSS, and C#
                    skills to build
                    the app without spending too much
                    time learning new technologies.</p>
                <h2 class="important-text">DataBase - SQLite</h2>
                <p class="paragraph">Deciding how to store the data wasn’t easy at first. I initially tried using
                    MongoDB, but it
                    wasn’t a good fit due to
                    its complexity and reliance on an internet connection. After some research, I found an ideal solution:
                    SQLite. It
                    allowed me to store the database
                    locally on the device, eliminating the need for internet access and keeping the application
                    straightforward while still
                    providing easy data management
                    with an ORM. Implementation was also manageable, thanks to some excellent libraries that made SQLite
                    compatible with my
                    mobile app development setup.</p>
                <div class="article-image-frame">
                    <img src="storageManager/WhatsApp Image 2025-04-03 at 9.08.01 PM5.jpeg" />
                </div>
                <h2 class="important-text">Features:</h2>
                <ul>
                    <li>CRUD of products;</li>
                    <li>Regist purchases and sales;</li>
                    <li>See statistics of product flow;</li>
                    <li>See mouth profit history;</li>
                </ul>
            </div>
        </div>
    }
    else
    {
        <Gallery Sources="@images" />
    }
</div>

@code
{
    private const string ACTIVE_TAB = "nav-item active";
    private const string UNACTIVE_TAB = "nav-item";
    private enum Tab { Article, Gallery };
    private Tab _tab = Tab.Article;
    private List<string> images = [];

    private string SetActive(Tab tab)
    => _tab == tab ? ACTIVE_TAB : UNACTIVE_TAB;

    protected override void OnInitialized()
    {
        images.Add("storageManager/WhatsApp Image 2025-04-03 at 9.08.01 PM.jpeg");
        images.Add("storageManager/WhatsApp Image 2025-04-03 at 9.08.01 PM2.jpeg");
        images.Add("storageManager/WhatsApp Image 2025-04-03 at 9.08.01 PM3.jpeg");
        images.Add("storageManager/WhatsApp Image 2025-04-03 at 9.08.01 PM4.jpeg");
        images.Add("storageManager/WhatsApp Image 2025-04-03 at 9.08.01 PM5.jpeg");
    }
}