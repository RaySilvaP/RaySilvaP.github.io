@using Shared.Models
@using Shared.Extensions
@using Frontend.Services
@page "/admin/poster"
@layout AdminLayout
@inject HttpService _httpService
@inject IJSRuntime _jSRuntime

<div>
    <h3>New Project</h3>
    <div class="project-form">
        <div class="project-form-properties">
            <label for="name">Name:</label>
            <input type="text" name="name" id="name" @bind-value="_name">
            <label for="description">Description:</label>
            <input type="text" name="description" id="description" @bind-value="_description">
        </div>
        <div class="project-form-images">
            <InputFile multiple OnChange="LoadFilesAsync" @ref="_inputFile" />
            <div class="images-preview" @ref="_imgsPreview">

            </div>
        </div>
        <div class="project-form-buttons">
            <button @onclick="PostProjectAsync">Post</button>
            <button @onclick="Clear">Clear</button>
        </div>
    </div>
</div>

@code
{
    private const string PATH = "uploads/";
    private string _name = string.Empty, _description = string.Empty;
    private Image _image = new();
    private List<string> _filesPath = [];
    private ElementReference _imgsPreview;
    private InputFile? _inputFile;
    private IReadOnlyList<IBrowserFile>? _files;

    private async Task PostProjectAsync()
    {
        if (_name == string.Empty || _description == string.Empty)
            return;

        var project = new Project
            {
                Name = _name,
                Description = _description,
            };
        var isSuccess = await _httpService.PostProjectAsync(project);
    }

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        _files = e.GetMultipleFiles();
        await _jSRuntime.InvokeVoidAsync("previewImages", _inputFile!.Element, _imgsPreview);
    }

    private void Clear()
    {
        _name = string.Empty;
        _description = string.Empty;
    }
}